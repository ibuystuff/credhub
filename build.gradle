buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
        kotlinVersion = '1.2.71'
        springCloudContractVersion = '2.0.2.RELEASE'
        springRestDocsVersion = '2.0.2.RELEASE'
        grpcVersion = '1.14.0'
        jsonPathVersion = '2.4.0'

        // https://github.com/grpc/grpc-java/blob/master/SECURITY.md#netty
        nettyVersion = '4.1.29.Final'
    }
    repositories {
        mavenCentral()
        maven { url("http://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.owasp:dependency-check-gradle:3.1.1")
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.6")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractVersion")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-cloud-contract'
apply plugin: "org.owasp.dependencycheck"
apply plugin: "com.google.protobuf"
apply from: "kotlin.gradle"
apply from: "spring-cloud-contract-config.gradle"
apply from: "spring-rest-docs-config.gradle"

jar {
    baseName = "credhub"
    def versionFile = new File("$projectDir/src/main/resources/version")
    if (System.getenv("VERSION")) {
        versionFile.write(System.getenv("VERSION"))
    }
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations.all {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
}

dependencies {
    // Spring stuff
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.security:spring-security-web")
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.5.RELEASE')
    implementation('org.springframework.security.oauth:spring-security-oauth2:2.3.3.RELEASE')
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier')
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc:$springRestDocsVersion")
    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestDocsVersion")

    // Kotlin
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // DB
    implementation("org.postgresql:postgresql:42.2.4")
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation("org.flywaydb:flyway-core")
    implementation("com.h2database:h2")

    // Other
    implementation("org.passay:passay:1.3.0")
    implementation("com.jayway.jsonpath:json-path:${jsonPathVersion}")
    implementation("org.bouncycastle:bcpkix-jdk15on:1.60")
    implementation("com.google.guava:guava:23.6-jre")
    implementation("org.apache.commons:commons-lang3:3.7")
    implementation("org.apache.commons:commons-io:1.3.2")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("net.java.dev.jna:jna:4.5.1")
    implementation("org.apache.httpcomponents:httpclient:4.5.5")

    //gRPC
    implementation "com.google.api.grpc:proto-google-common-protos:1.12.0"
    implementation "io.grpc:grpc-services:${grpcVersion}"

    //gRPC - Netty
    implementation "io.grpc:grpc-netty:${grpcVersion}"

    //Netty
    implementation "io.netty:netty-transport-native-unix-common:${nettyVersion}"
    implementation "io.netty:netty-all:${nettyVersion}"

    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("com.jayway.jsonpath:json-path-assert:${jsonPathVersion}")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
    }
}

processResources {
    outputs.upToDateWhen { false }
}

task updateVersionFile(type: Exec) {
    commandLine './scripts/fetch-version.sh'
}

bootRun {
    dependsOn updateVersionFile
    sourceResources sourceSets.main
    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "dev, dev-h2")
}

task cleanAndAssemble(dependsOn: ['clean', 'assemble'])

assemble.mustRunAfter("clean")

test {
    testLogging {
        events "passed", "failed", "skipped"
        exceptionFormat "full"
    }

    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "unit-test-h2")
    systemProperties["java.security.egd"] = System.getProperty("java.security.egd", "file:/dev/urandom")
    outputs.upToDateWhen { false }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
