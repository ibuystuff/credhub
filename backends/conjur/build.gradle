buildscript {
    repositories {
        mavenCentral()
        maven { url("http://repo.spring.io/plugins-release") }
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciiDoctorPluginVersion}")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'io.spring.dependency-management'
apply from: "${rootDir.toPath()}/kotlin.gradle"
apply from: "${rootDir.toPath()}/ktlint.gradle"
apply from: "${rootDir.toPath()}/checkstyle-config.gradle"
apply from: "${rootDir.toPath()}/pmd-config.gradle"
apply from: "${rootDir.toPath()}/spotbugs.gradle"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation project(":backends:shared-backend-configuration")
    implementation project(":components:credentials")
    implementation project(":components:errors")
    implementation project(":components:time-support")

    testImplementation project(path: ":components:test-support", configuration: "testOutput")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // Other
    implementation("com.google.guava:guava:${guavaVersion}")

    testImplementation("com.github.tomakehurst:wiremock:2.21.0")

}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

sourceSets {
    test {
        resources {
            srcDirs += [
                    project(":applications:credhub-api").sourceSets.main.resources,
                    project(":applications:credhub-api").sourceSets.test.resources
            ]
        }
    }
}

test {
    testLogging {
        events "passed", "failed", "skipped"
        exceptionFormat "full"
    }

    systemProperties = System.properties
    systemProperties["spring.profiles.active"] = System.getProperty("spring.profiles.active", "unit-test-h2")
    systemProperties["java.security.egd"] = System.getProperty("java.security.egd", "file:/dev/urandom")
    outputs.upToDateWhen { false }
}
